#!/bin/bash

# installTemplateSite
#
# Install the WDK Template Site, a demo for the Strategies WDK and a
# starting point for people who want to develop their own Strategies WDK site
#
# https://code.google.com/p/strategies-wdk/

# IMPORTANT: edit the "configuration" section to match your own install
#  before running this script

######################################################################
# configuration

# not rewritten in samples
TOMCAT_HOME=/usr/share/tomcat6
ORACLE_JARFILE=ojdbc5.jar
# rewritten in samples
BASE_DIRECTORY=/www/wdktemplate
WEBAPP_NAME=wdktemplate
MODEL_NAME=TemplateDB
DB_VENDOR='Postgres or Oracle'
DB_DSN=DBI:Pg:dbname=your_db;host=localhost
DB_JDBC_DSN=jdbc:postgresql:your_db
DB_USER=siteuser
DB_PASSWORD=abc123

# my local stuff, for testing -- don't check the file in with this
BASE_DIRECTORY=/www/niagads
WEBAPP_NAME=niagads
DB_DSN=DBI:Pg:dbname=niagads13;host=localhost
DB_JDBC_DSN=jdbc:postgresql://localhost/niagads13
DB_USER=iodice
DB_PASSWORD=bldN1agads
DB_VENDOR=Postgres

######################################################################
# check prerequisites

echo -e "\nThis script ($0) will install the WDK Template Site."
SEPARATOR=`echo -e "\n--------------------------------------------------\n " `

function check {
  echo "${SEPARATOR}"
  whither=`which $1 2>/dev/null`
  if [ $? -ne 0 ]; then
    echo "ERROR: can't find command \"$1\""
  else
    echo check version of $1 \(${whither}\):
  fi
}

# check that we can write to the install directory
touch ${BASE_DIRECTORY}/foo 2>/dev/null
rm ${BASE_DIRECTORY}/foo 2>/dev/null
if [ $? -ne 0 ]; then
  echo "${SEPARATOR}"
  echo "ERROR: can't write to ${BASE_DIRECTORY}; check config variable \$BASE_DIRECTORY"
fi

# check that Tomcat allows a symbolic link to a webapp
ls ${TOMCAT_HOME}/conf/server.xml > /dev/null
if [ $? -ne 0 ]; then
  echo "${SEPARATOR}"
  echo "ERROR: can't find Tomcat's server.xml file (\$TOMCAT_HOME is set to ${TOMCAT_HOME})"
else
  grep 'allowLinking="true"' ${TOMCAT_HOME}/conf/server.xml > /dev/null
  if [ $? -ne 0 ]; then
    echo "${SEPARATOR}"
    echo "ERROR: Tomcat's server.xml file (${TOMCAT_HOME}/conf/server.xml) doesn't set allowLinking=\"true\". "
    echo The '<Context>' element in server.xml must contain the attribute \'allowLinking=\"true\"\'. 
  fi
fi

# Java
check java
java -version

echo "${SEPARATOR}"
echo "\$LD_LIBRARY_PATH = \"${LD_LIBRARY_PATH}\""

# Subversion
check svn
svn --version | head -1

# Ant
check ant
ant -version

# Oracle jarfile (needed for PostgreSQL installs too [why?] )
ls ${ORACLE_JARFILE} > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "${SEPARATOR}"
  echo "ERROR: can't find Oracle driver jarfile (\$ORACLE_JARFILE is set to ${ORACLE_JARFILE})"

  if [ "${DB_VENDOR}" != "Oracle" ]; then
    echo "*** Note that this file is required even in installs that don't use Oracle."
  fi

  echo "Download this file from Oracle.com and point the \$ORACLE_JARFILE variable at it."
fi


# DBMS
if [ "${DB_VENDOR}" = "Postgres" ]; then

  # PostgreSQL-specific checks
  check psql
  psql -V

  # persistent tables, PostgreSQL-style
  svn export https://www.cbil.upenn.edu/svn/gus/WDK/branches/api-build-16/Model/data/persistent_tables_postgres.sql > /dev/null
  echo; echo "NOTE: if you haven't already, run the script persistent_tables_postgres.sql (which has just been saved in `pwd`) to create tables needed by the WDK."

elif [ "${DB_VENDOR}" = "Oracle" ]; then

  # Oracle-specific checks
  check sqlplus
  sqlplus -v

  # persistent tables, Oracle-style
  svn export https://www.cbil.upenn.edu/svn/gus/WDK/branches/api-build-16/Model/data/persistent_tables_oracle.sql > /dev/null
  echo; echo "NOTE: if you haven't already, run the script persistent_tables_oracle.sql (which has just been saved in `pwd`) to create tables needed by the WDK."

else
  echo "${SEPARATOR}"
  echo "ERROR: \$DB_VENDOR must be set to either \"Postgres\" or \"Oracle\""
fi

echo "${SEPARATOR}"
echo -n 'proceed with install? (y/n) > '
read response
responseStart=`echo $response | cut -c1 `
if  [ "${responseStart}" != "y" ]; then
    echo exiting without installing
    exit
fi


######################################################################
# installation

echo "\ninstalling WDK template site"

function rewrite {
  # given input and output files, copy contents using the "substitute" command
  # to instantiate variables

cat $1 | \
substitute '<dbVendor>' "${DB_VENDOR}" | \
substitute '<dbiDsn>' "${DB_DSN}" | \
substitute '<jdbcDsn>' "${DB_JDBC_DSN}" | \
substitute '<dbLogin>' "${DB_USER}" | \
substitute '<dbPassword>' "${DB_PASSWORD}" | \
substitute '<modelName>' "${MODEL_NAME}" | \
substitute '<baseDirectory>' "${BASE_DIRECTORY}" | \
cat  > $2
}

# create directories
cd ${BASE_DIRECTORY}
mkdir cgi-bin
mkdir cgi-lig
mkdir conf
mkdir etc
mkdir gus_home
mkdir htdocs
mkdir logs; chmod 777 logs
mkdir project_home

# check out the Subversion project of the template site, along with the others it depends on
cd ${BASE_DIRECTORY}/project_home
svn checkout https://www.cbil.upenn.edu/svn/cbil/WDKTemplate/api-build-16/WDKTemplateWebsite/ WDKTemplateSite
svn checkout https://www.cbil.upenn.edu/svn/gus/FgpUtil/branches/api-build-16 FgpUtil
svn checkout https://www.cbil.upenn.edu/svn/gus/install/branches/api-build-16 install
svn checkout https://www.cbil.upenn.edu/svn/gus/WDK/branches/api-build-16 WDK
svn checkout https://www.cbil.upenn.edu/svn/gus/WSF/branches/api-build-16 WSF

# set $GUS_HOME, $PROJECT_HOME
cd ${BASE_DIRECTORY}
source project_home/install/bin/gusEnv.bash

# augment PATH so we can use substitute
PATH=${PATH}:${PROJECT_HOME}/WDKTemplateSite/Model/bin

# GUS config file
mkdir -p $(GUS_HOME)/config
rewrite $PROJECT_HOME/install/gus.config.sample $(GUS_HOME)/config/gus.config

mkdir -p $(GUS_HOME)/lib/java/db_driver
cp ${ORACLE_JARFILE} $(GUS_HOME)/lib/java/db_driver
bld WDK
bld WDKTemplateSite

# model-config
cd $GUS_HOME/config/${MODEL_NAME}
rewrite model.prop.sample model.prop
rewrite model-config.xml.sample-min model-config.xml
# edit model-config.xml to populate the login, password, and connectionUrl
#   attributes of the <appDb> and <userDb> elements

echo "${SEPARATOR}"
echo "creating WDK cache"
wdkCache -model ${MODEL_NAME} -new

# insert test data (fodder for model queries)
wdkTestDb -model ${MODEL_NAME}  -new

# webinstall
rewrite ${PROJECT_HOME}/WDK/Controller/config/webapp.prop.sample ${BASE_DIRECTORY}/conf/webapp.prop
bldw WDKTemplateSite ${BASE_DIRECTORY}/conf/webapp.prop

# log4j configuration
rewrite ${GUS_HOME}/config/log4j.xml.sample ${BASE_DIRECTORY{/webapp/WEB-INF/classes/log4j.xml

# database driver:
sudo ln -s ${GUS_HOME}/lib/java/db_driver/postgresql-8.3-603.jdbc3.jar ${TOMCAT_HOME}/lib/postgresql-8.3-603.jdbc3.jar

# create tomcat.xml, make a symbolic link to it that Tomcat can see, and cycle Tomcat
cd $GUS_HOME/config
rewrite wdk-context.xml.sample wdk-context.xml

echo "To complete the installation of the WDK template site, perform the following two steps."
echo "(They may have to be done by a system administrator, or with the use of the \"sudo\" command.)"
echo
echo "First, make a symbolic link to the new site's Context XML file from Tomcat's localhost dir:"
echo "sudo ln -s ${GUS_HOME}/config/wdk-context.xml ${TOMCAT_HOME}/conf/Catalina/localhost/${WEBAPP_NAME}.xml"
echo
echo "Next, cycle Tomcat:"
echo "sudo /etc/init.d/tomcat6 stop"
echo "sudo /etc/init.d/tomcat6 start"
