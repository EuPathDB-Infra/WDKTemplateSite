#!/bin/bash

# installTemplateSite
#
# Install the WDK Template Site, a demo for the Strategies WDK and a
# starting point for people who want to develop their own Strategies WDK site
#
# https://code.google.com/p/strategies-wdk/

# IMPORTANT: edit the "configuration" section to match your own install
#  before running this script

######################################################################
# configuration

BASE_DIRECTORY=/www/wdktemplate
WEBAPP_NAME=wdktemplate
MODEL_NAME=TemplateDB
DB_VENDOR='Postgres or Oracle'
DB_DSN=DBI:Pg:dbname=your_db;host=localhost
DB_JDBC_DSN=jdbc:postgresql:your_db
DB_USER=siteuser
DB_PASSWORD=abc123
TOMCAT_HOME=/usr/share/tomcat6
ORACLE_JARFILE=ojdbc5.jar # needed even for a PostgreSQL install
SERVER_NAME=localhost:8080
SUPPORT_EMAIL=help@wdktemplate.org
LOAD_TEMPLATE_DATA=true

######################################################################
# check prerequisites

echo -e "\nThis script ($0) will install the WDK Template Site."
echo "NOTE: You must edit its \"configuration\" section before running it."
SEPARATOR=`echo -e "\n--------------------------------------------------\n " `

function check {
  echo "${SEPARATOR}"
  whither=`which $1 2>/dev/null`
  if [ $? -ne 0 ]; then
    echo "ERROR: can't find command \"$1\""
  else
    echo check version of $1 \(${whither}\):
  fi
}

# check that we can write to the install directory
touch ${BASE_DIRECTORY}/foo 2>/dev/null
rm ${BASE_DIRECTORY}/foo 2>/dev/null
if [ $? -ne 0 ]; then
  echo "${SEPARATOR}"
  echo "ERROR: can't write to ${BASE_DIRECTORY}; check config variable \$BASE_DIRECTORY"
fi

# check that Tomcat allows a symbolic link to a webapp
ls ${TOMCAT_HOME}/conf/server.xml > /dev/null
if [ $? -ne 0 ]; then
  echo "${SEPARATOR}"
  echo "ERROR: can't find Tomcat's server.xml file (\$TOMCAT_HOME is set to ${TOMCAT_HOME})"
else
  grep 'allowLinking="true"' ${TOMCAT_HOME}/conf/server.xml > /dev/null
  if [ $? -ne 0 ]; then
    echo "${SEPARATOR}"
    echo "ERROR: Tomcat's server.xml file (${TOMCAT_HOME}/conf/server.xml) doesn't set allowLinking=\"true\". "
    echo The '<Context>' element in server.xml must contain the attribute \'allowLinking=\"true\"\'. 
  fi
fi

# Java
check java
java -version

echo "${SEPARATOR}"
echo "\$LD_LIBRARY_PATH = \"${LD_LIBRARY_PATH}\""

# Subversion
check svn
svn --version | head -1

# Ant
check ant
ant -version

# Oracle jarfile (needed for PostgreSQL installs too [why?] )
ls ${ORACLE_JARFILE} > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "${SEPARATOR}"
  echo "ERROR: can't find Oracle driver jarfile (\$ORACLE_JARFILE is set to ${ORACLE_JARFILE})"

  if [ "${DB_VENDOR}" != "Oracle" ]; then
    echo "*** Note that this file is required even in installs that don't use Oracle."
  fi

  echo "Download this file from Oracle.com and point the \$ORACLE_JARFILE variable at it."
fi

DB_PLATFORM=$DB_VENDOR

# DBMS
if [ "${DB_VENDOR}" = "Postgres" ]; then

  # PostgreSQL-specific checks
  check psql
  psql -V

  # persistent tables, PostgreSQL-style
  svn export https://www.cbil.upenn.edu/svn/gus/WDK/trunk/Model/data/persistent_tables_postgres.sql > /dev/null
  echo; echo "NOTE: if you haven't already, run the script persistent_tables_postgres.sql"
  echo " (which has just been saved in `pwd`) to create tables needed by the WDK."

  DB_DRIVER_FILE=postgresql-8.3-603.jdbc3.jar
  DB_PLATFORM='PostgreSQL'   # GUS says "Postgres", but WDK says "PostgreSQL". Potato, potahto.

elif [ "${DB_VENDOR}" = "Oracle" ]; then

  # Oracle-specific checks
  check sqlplus
  sqlplus -v

  # persistent tables, Oracle-style
  svn export https://www.cbil.upenn.edu/svn/gus/WDK/trunk/Model/data/persistent_tables_oracle.sql > /dev/null
  echo; echo "NOTE: if you haven't already, run the script persistent_tables_oracle.sql (which has just been saved in `pwd`) to create tables needed by the WDK."

  # use the Orace jarfile
  DB_DRIVER_FILE=${ORACLE_JARFILE}
else
  echo "${SEPARATOR}"
  echo "ERROR: \$DB_VENDOR must be set to either \"Postgres\" or \"Oracle\""
fi

echo "${SEPARATOR}"
echo -n 'proceed with install? (y/n) > '
read response
responseStart=`echo $response | cut -c1 `
if  [ "${responseStart}" != "y" ]; then
    echo exiting without installing
    exit
fi


######################################################################
# installation

echo  -e "\ninstalling WDK template site"

# create directories
cd ${BASE_DIRECTORY}
mkdir cgi-bin
mkdir cgi-lig
mkdir conf
mkdir etc
mkdir gus_home
mkdir htdocs
mkdir logs; chmod 777 logs
mkdir project_home

# check out the Subversion project of the template site, along with the others it depends on
cd ${BASE_DIRECTORY}/project_home
svn checkout https://www.cbil.upenn.edu/svn/gus/WDKTemplateSite/trunk WDKTemplateSite
svn checkout https://www.cbil.upenn.edu/svn/gus/FgpUtil/trunk FgpUtil
svn checkout https://www.cbil.upenn.edu/svn/gus/install/trunk install
svn checkout https://www.cbil.upenn.edu/svn/gus/WDK/trunk WDK
svn checkout https://www.cbil.upenn.edu/svn/gus/WSF/trunk WSF

# set $GUS_HOME, $PROJECT_HOME
cd ${BASE_DIRECTORY}
source project_home/install/bin/gusEnv.bash

# augment PATH so we can use substitute
PATH=${PATH}:${PROJECT_HOME}/WDKTemplateSite/Model/bin

function rewrite {
  # given input and output files, copy contents, using the "substitute" command
  # to instantiate variables

cat $1 | \
substitute '<webappName>' "${WEBAPP_NAME}" | \
substitute '<dbVendor>' "${DB_VENDOR}" | \
substitute '<dbPlatform>' "${DB_PLATFORM}" | \
substitute '<dbiDsn>' "${DB_DSN}" | \
substitute '<jdbcDsn>' "${DB_JDBC_DSN}" | \
substitute '<dbLogin>' "${DB_USER}" | \
substitute '<dbPassword>' "${DB_PASSWORD}" | \
substitute '<modelName>' "${MODEL_NAME}" | \
substitute '<baseDirectory>' "${BASE_DIRECTORY}" | \
substitute '<serverName>' "${SERVER_NAME}" | \
substitute '<supportEmail>' "${SUPPORT_EMAIL}" | \
cat  > $2
}

# GUS config file
mkdir -p ${GUS_HOME}/config
rewrite ${PROJECT_HOME}/install/gus.config.sample ${GUS_HOME}/config/gus.config

mkdir -p ${GUS_HOME}/lib/java/db_driver
cp ${ORACLE_JARFILE} ${GUS_HOME}/lib/java/db_driver
mkdir -p ${GUS_HOME}/config/${MODEL_NAME}

# model-config
cd ${GUS_HOME}/config/${MODEL_NAME}
rewrite ${PROJECT_HOME}/WDK/Model/config/model.prop.sample ${GUS_HOME}/config/${MODEL_NAME}/model.prop
rewrite ${PROJECT_HOME}/WDK/Model/config/model-config.xml.sample-min ${GUS_HOME}/config/${MODEL_NAME}/model-config.xml


# webinstall
rewrite ${PROJECT_HOME}/WDK/Controller/config/webapp.prop.sample ${BASE_DIRECTORY}/conf/webapp.prop
bldw WDKTemplateSite ${BASE_DIRECTORY}/conf/webapp.prop

echo "${SEPARATOR}"
echo "creating WDK cache"
wdkCache -model ${MODEL_NAME} -new
wdkCache -model ${MODEL_NAME} -reset

# insert test data (fodder for model queries)
if [ "${LOAD_TEMPLATE_DATA}" = "true" ]; then
  echo 'loading template-site data into database'
  wdkTestDb -model ${MODEL_NAME}  -new
fi

# log4j configuration
rewrite ${GUS_HOME}/config/log4j.xml.sample ${BASE_DIRECTORY}/webapp/WEB-INF/classes/log4j.xml

# Tomcat Context XML
cd ${GUS_HOME}/config
rewrite wdk-context.xml.sample wdk-context.xml

echo; echo; echo;
echo "# The last steps of the install require the assistance of a system administrator, "
echo "# or the use of the \"sudo\" command (as shown in these examples)"
echo
echo "# First, make a symbolic link to the new site's Context XML file from Tomcat's localhost dir:"
echo "sudo ln -s ${GUS_HOME}/config/wdk-context.xml ${TOMCAT_HOME}/conf/Catalina/localhost/${WEBAPP_NAME}.xml"
echo
echo "# Next, make a link to the database-driver jarfile in Tomcat's lib directory,"
echo "# so that Tomcat doesn't load a separate copy for each webapp:"
echo "sudo ln -s ${GUS_HOME}/lib/java/db_driver/${DB_DRIVER_FILE} ${TOMCAT_HOME}/lib/${DB_DRIVER_FILE}"
echo
echo "# Finally, cycle Tomcat:"
echo "sudo /etc/init.d/tomcat6 stop"
echo "sudo /etc/init.d/tomcat6 start"
echo
echo 
echo "# for ongoing development, define your interactive environment with this command line:"
echo "cd ${BASE_DIRECTORY}; source project_home/install/bin/gusEnv.bash"